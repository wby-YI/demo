{"remainingRequest":"C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\src\\views\\product\\TradeMark\\index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\src\\views\\product\\TradeMark\\index.vue","mtime":1652682347051},{"path":"C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":1652600930386},{"path":"C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1652600999522},{"path":"C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\node_modules\\postcss-loader\\src\\index.js","mtime":1652600964521},{"path":"C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652600907899},{"path":"C:\\Users\\xiao\\Desktop\\vue_project\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1652600973833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYXZhdGFyLXVwbG9hZGVyIC5lbC11cGxvYWQgewogIGJvcmRlcjogMXB4IGRhc2hlZCAjZDlkOWQ5OwogIGJvcmRlci1yYWRpdXM6IDZweDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIG92ZXJmbG93OiBoaWRkZW47Cn0KLmF2YXRhci11cGxvYWRlciAuZWwtdXBsb2FkOmhvdmVyIHsKICBib3JkZXItY29sb3I6ICM0MDllZmY7Cn0KLmF2YXRhci11cGxvYWRlci1pY29uIHsKICBmb250LXNpemU6IDI4cHg7CiAgY29sb3I6ICM4YzkzOWQ7CiAgd2lkdGg6IDE3OHB4OwogIGhlaWdodDogMTc4cHg7CiAgbGluZS1oZWlnaHQ6IDE3OHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQouYXZhdGFyIHsKICB3aWR0aDogMTc4cHg7CiAgaGVpZ2h0OiAxNzhweDsKICBkaXNwbGF5OiBibG9jazsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/product/TradeMark","sourcesContent":["<template>\n  <div>\n    <!-- 按钮 -->\n    <el-button\n      type=\"primary\"\n      icon=\"el-icon-plus\"\n      style=\"margin: 10px 0px\"\n      @click=\"showDialog\"\n      >添加</el-button\n    >\n    <!-- \n         表格组件 \n         data:表格组件将来需要展示的数据------数组类型\n         border：是给表格添加边框\n         column属性\n         label：显示标题\n         width：对应列的宽度\n         align：标题的对齐方式\n         prop:对应列内容的字段名\n         注意1：elmentUI当中的table组件，展示的数据是以一列一列进行展示数据\n       -->\n    <el-table style=\"width: 100%\" border :data=\"list\">\n      <el-table-column type=\"index\" label=\"序号\" width=\"80px\" align=\"center\">\n      </el-table-column>\n      <el-table-column prop=\"tmName\" label=\"品牌名称\" width=\"width\">\n      </el-table-column>\n      <el-table-column prop=\"logoUrl\" label=\"品牌LOGO\" width=\"width\">\n        <template slot-scope=\"{ row, $index }\">\n          <img :src=\"row.logoUrl\" alt=\"\" style=\"width: 100px; height: 100px\" />\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"prop\" label=\"操作\" width=\"width\">\n        <template slot-scope=\"{ row, $index }\">\n          <el-button\n            type=\"warning\"\n            icon=\"el-icon-edit\"\n            size=\"mini\"\n            @click=\"updateTradeMark(row)\"\n            >修改</el-button\n          >\n          <el-button\n            type=\"danger\"\n            icon=\"el-icon-delete\"\n            size=\"mini\"\n            @click=\"deleteTradeMark(row)\"\n            >删除</el-button\n          >\n        </template>\n      </el-table-column>\n    </el-table>\n    <!-- \n      分页器 \n      当前第几页、数据总条数、每一页展示条数、连续页码数\n      @size-change=\"handleSizeChange\"      pageSize 改变时会触发\n      @current-change=\"handleCurrentChange\"      currentPage  改变时触发\n\n      current-page:代表的是当前第几页\n      total：代表分页器一共需要展示数据条数\n      page-size：代表的是每一页需要展示多少条数据\n      page-sizes：代表可以设置每一页展示多少条数据\n      layout：可以实现分页器布局\n      pager-count:按钮的数量  如果 9  连续页码是7\n\n    -->\n    <el-pagination\n      style=\"margin-top: 20px; text-align: center\"\n      :current-page=\"page\"\n      :total=\"total\"\n      :page-size=\"limit\"\n      :pager-count=\"7\"\n      :page-sizes=\"[3, 5, 10]\"\n      @current-change=\"getPageList\"\n      @size-change=\"handleSizeChange\"\n      layout=\"prev, pager, next, jumper,->,sizes,total\"\n    >\n    </el-pagination>\n    <!--\n      对话框\n      :visible.sync:控制对话框显示与隐藏用的\n      Form 组件提供了表单验证的功能，只需要通过 rules 属性传入约定的验证规则，并将 Form-Item 的 prop 属性设置为需校验的字段名即可\n    -->\n    <el-dialog\n      :title=\"tmForm.id ? '修改品牌' : '添加品牌'\"\n      :visible.sync=\"dialogFormVisible\"\n    >\n      <!-- form表单 :model属性，这个属性的作用是,把表单的数据收集到哪个对象的身上 ，将来表单验证，也需要这个属性-->\n      <el-form style=\"width: 80%\" :model=\"tmForm\" :rules=\"rules\" ref=\"ruleForm\">\n        <el-form-item label=\"品牌名称\" label-width=\"100px\" prop=\"tmName\">\n          <el-input autocomplete=\"off\" v-model=\"tmForm.tmName\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"品牌LOGO\" label-width=\"100px\" prop=\"logoUrl\">\n          <!--这里收集数据：不能使用v-model，因为不是表单元素\n            action:设置图片上传的地址\n            :on-success:可以检测到图片上传成功，当图片上传成功，会执行一次\n            :before-upload：可以在上传图片之前，会执行一次\n\n          -->\n          <el-upload\n            class=\"avatar-uploader\"\n            action=\"/dev-api/admin/product/fileUpload\"\n            :show-file-list=\"false\"\n            :on-success=\"handleAvatarSuccess\"\n            :before-upload=\"beforeAvatarUpload\"\n          >\n            <img v-if=\"tmForm.logoUrl\" :src=\"tmForm.logoUrl\" class=\"avatar\" />\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n            <div slot=\"tip\" class=\"el-upload__tip\">\n              只能上传jpg/png文件，且不超过500kb\n            </div>\n          </el-upload>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addOrUpdateTradeMark\"\n          >确 定</el-button\n        >\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"TradeMark\",\n  data() {\n    //自定义校验规则\n    var validateTmName = (rule, value, callback) => {\n      //自定义校验规则\n      if (value.length < 2 || value.length > 10) {\n      // if (value.trim().length < 2 || value.trim().length > 10) {   解决空格的问题\n        callback(new Error(\"品牌名称2-10位\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      //代表的分页器第几页\n      page: 1,\n      //当前页数展示数据条数\n      limit: 3,\n      //总共数据条数\n      total: 0,\n      //列表展示的数据\n      list: [],\n      //对话框显示与隐藏控制的属性\n      dialogFormVisible: false,\n      //收集品牌信息:对象身上的属性，不能瞎写，需要看文档的\n      tmForm: {\n        tmName: \"\",\n        logoUrl: \"\",\n      },\n      //表单验证规则\n      rules: {\n        //品牌名称的验证规则\n        //require:必须要校验字段（前面五角星有关系）  message 提示信息    trigger:用户行为设置（事件的设置:blur、change）\n        tmName: [\n          { required: true, message: \"请输入品牌名称\", trigger: \"blur\" },\n          //  { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'change' },\n          //自定义校验规则\n          { validator: validateTmName, trigger: \"change\" },\n        ],\n        //品牌的logo验证规则\n        logoUrl: [{ required: true, message: \"请选择品牌的图片\" }],\n      },\n    };\n  },\n  //组件挂载完毕发请求\n  mounted() {\n    // console.log(this.$API);\n    //获取列表数据方法\n    this.getPageList();\n  },\n  methods: {\n    //获取品牌列表的数据\n    //没传值之前pager默认是1（后面省一个函数）\n    async getPageList(pager = 1) {\n      //当点击分页器数字按钮的时候，传入了参数pager，可以把pager重新赋值给page\n      this.page = pager;\n      //解构出参数\n      const { page, limit } = this;\n      //获取品牌列表的接口\n      //当你向服务器发请求的时候，这个函数需要带参数，因此老师在data当中初始化两个字段，代表给服务器传递参数\n      let result = await this.$API.trademark.reqTradeMarkList(page, limit);\n      // console.log(result);\n      if (result.code == 200) {\n        //分别是展示数据总条数与列表展示的数据\n        this.total = result.data.total;\n        this.list = result.data.records;\n      }\n    },\n    //当分页器某一页需要展示数据条数发生变化的时候会触发\n    handleSizeChange(limit) {\n      //整理参数\n      this.limit = limit;\n      //再次发请求\n      this.getPageList();\n    },\n    //点击添加品牌的按钮\n    showDialog() {\n      //显示对话框\n      this.dialogFormVisible = true;\n      //清除数据\n      this.tmForm = { tmName: \"\", logoUrl: \"\" };\n    },\n    //修改某一个品牌\n    updateTradeMark(row) {\n      //row：当前用户选中这个品牌信息\n      //显示对话框\n      this.dialogFormVisible = true;\n      //将已有的品牌信息赋值给tmForm进行展示\n      //将服务器返回品牌的信息，直接赋值给了tmForm进行展示。\n      //也就是tmForm存储即为服务器返回品牌信息\n      //使用浅拷贝 赋值给tmForm\n      this.tmForm = { ...row };\n    },\n\n    //图片上传成功\n    handleAvatarSuccess(res, file) {\n      //res：上传成功之后返回前端数据\n      //file:上传成功之后服务器返回前端数据\n      //收集品牌图片数据，因为将来需要带给服务器\n      this.tmForm.logoUrl = res.data;\n    },\n    //图片上传之前\n    beforeAvatarUpload(file) {\n      const isJPG = file.type === \"image/jpeg\";\n      const isLt2M = file.size / 1024 / 1024 < 2;\n\n      if (!isJPG) {\n        this.$message.error(\"上传头像图片只能是 JPG 格式!\");\n      }\n      if (!isLt2M) {\n        this.$message.error(\"上传头像图片大小不能超过 2MB!\");\n      }\n      return isJPG && isLt2M;\n    },\n    //添加按钮（添加品牌|修改品牌）\n    addOrUpdateTradeMark() {\n      //当全部验证字段通过，再去书写业务逻辑\n      this.$refs.ruleForm.validate(async (success) => {\n        //如果全部字段符合条件\n        if (success) {\n          this.dialogFormVisible = false;\n          //发请求（添加品牌|修改品牌）\n          let result = await this.$API.trademark.reqAddOrUpdateTradeMark(\n            this.tmForm\n          );\n          if (result.code == 200) {\n            //弹出信息:添加品牌成功、修改品牌成功\n            this.$message({\n              type: \"success\",\n              message: this.tmForm.id ? \"修改品牌成功\" : \"添加品牌成功\",\n            });\n            //添加或者修改品牌成功以后，需要再次获取品牌列表进行展示\n            //如果添加品牌： 停留在第一页，修改品牌应该留在当前页面\n            this.getPageList(this.tmForm.id ? this.page : 1);\n          }\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    //删除品牌的操作\n    deleteTradeMark(row) {\n      // console.log(row);\n      //弹框\n      this.$confirm(`你确定删除${row.tmName}?`, \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\",\n      })\n        .then(async () => {\n          //当用户点击确定按钮的时候会触发\n          //向服务器发请求\n          let result = await this.$API.trademark.reqDeleteTradeMark(row.id);\n          //如果删除成功\n          if (result.code == 200) {\n            this.$message({\n              type: \"success\",\n              message: \"删除成功!\",\n            });\n            //再次获取品牌列表数据\n            this.getPageList(this.list.length>1?this.page:this.page-1);\n          }\n        })\n        .catch(() => {\n          //当用户点击取消按钮的时候会触发\n          this.$message({\n            type: \"info\",\n            message: \"已取消删除\",\n          });\n        });\n    },\n  },\n};\n</script>\n<style>\n.avatar-uploader .el-upload {\n  border: 1px dashed #d9d9d9;\n  border-radius: 6px;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n.avatar-uploader .el-upload:hover {\n  border-color: #409eff;\n}\n.avatar-uploader-icon {\n  font-size: 28px;\n  color: #8c939d;\n  width: 178px;\n  height: 178px;\n  line-height: 178px;\n  text-align: center;\n}\n.avatar {\n  width: 178px;\n  height: 178px;\n  display: block;\n}\n</style>\n\n\n\n\n"]}]}